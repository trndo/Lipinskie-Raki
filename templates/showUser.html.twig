{% extends 'base.html.twig' %}
{% block title %}Личный кабинет{% endblock %}
{% block description %}Личный кабинет пользователя Lipinskie Raki{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    {{ encore_entry_link_tags('footer') }}
{% endblock %}
{% block body %}
    <div class="container">
        {% set sum = app.session.get('totalSum') %}
        {% include 'elements/small_header.html.twig' %}
        <main>
            {% include 'elements/additionalNavUser.html.twig' with { 'active': 'user'} %}
            <div class="user-tabs">
                <div class="user-tab user-tab-active" data-path="{{ path('user',{'uniqueId': app.user.uniqueId}) }}">Личные данные</div>
                <div class="user-tab" data-path="{{ path('user_orders',{'uniqueId': app.user.uniqueId}) }}">Мои заказы</div>
                <div class="user-tab user-tab-last" data-path="{{ path('resetPass',{'uniqueId': app.user.uniqueId}) }}">Поменять пароль</div>
            </div>
            <div class="user-red-content height-max-content">
                <a href="{{ path('logout') }}" class="logout" title="Выйти"><i class="fas fa-sign-out-alt"></i></a>
                <embed id="lobster" type="image/svg+xml" src="/assets/img/lobster.svg"/>
                <div class="user-title mt-3">
                    <span class="attention-title">Один раз заполнил - заказывай всё время!</span><br>
                    <span class="attention-subtitle user-code">Ваш уникальный номер - <u>{{ app.user.uniqueId }}</u></span><br>
                </div>
                {{ form_start(form,{'attr':{'class': 'user_info_update'}}) }}
                    <div class="input-user-container">
                        <div>
                            {{ form_widget(form.name,{'attr':{'class': 'user-input login-input',
                                                              'placeholder': 'Имя'}}) }}
                        </div>
                        <div>
                            {{ form_widget(form.email,{'attr':{'class': 'user-input login-input',
                                                         'placeholder': 'Email'}}) }}
                            {% if form.email.vars.errors %}
                                {% if form.email.vars.errors[0] is defined %}<small style="width: 165px; word-break: break-word" class="validation-mess">{{ form.email.vars.errors[0].message }}</small>{% endif %}
                            {% endif %}
                        </div>
                        <div>
                            {{ form_widget(form.phone,{'attr':{'class': 'user-input login-input phone',
                                'placeholder': '+38(095)0000000'}}) }}
                        </div>
                    </div>
                    <div class="input-user-container mt-1 mb-4">
                        <div>
                            {{ form_widget(form.address,{'attr':{'class': 'user-input login-input',
                                'placeholder': 'Адрес'}}) }}
                        </div>
                        <div id="user-map"></div>
                    </div>
                            {{ form_widget(form.coordinates) }}
                            {{ form_widget(form.save,{'attr':{'class': 'login-button btn'}}) }}
                {{ form_end(form) }}
            </div>
            {% include 'elements/attention-promotion.html.twig' %}
        </main>
    </div>
    {% include 'elements/__footer.html.twig' with { 'active': false } %}
    {% include 'elements/mobile-nav.html.twig' with {'mob_active': false} %}
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script src="https://maps.googleapis.com/maps/api/js?key={{ google_map_key }}&libraries=places&callback=initMap"
            async defer></script>
    <script>
        let coordinates = '{{ app.user.coordinates }}';
        console.log(coordinates);
        let position = { lat: Number(coordinates.substr(0,coordinates.indexOf(' '))), lng: Number(coordinates.substr(coordinates.indexOf(' ')+1))};

        function initMap() {
            let map = new google.maps.Map(document.getElementById('user-map'), {
                center: position,
                zoom: 15
            });
            let marker = new google.maps.Marker({position: position, map: map});
            let geocoder =  new google.maps.Geocoder;
            let listener = map.addListener('click', function(e) {
                placeMarker(e.latLng, map);
            });
            function placeMarker(position, map) {
                if (marker == null) {
                    marker = new google.maps.Marker({
                        position: position,
                        map: map
                    });
                    geocodePosition(marker);
                    map.panTo(position);
                } else {
                    geocodePosition(marker);
                    marker.setPosition(position);
                    map.panTo(position);
                }
            }

            function geocodePosition(marker) {
                let latLng = {
                    lat: marker.getPosition().lat(),
                    lng: marker.getPosition().lng()
                };
                geocoder.geocode({
                    'location' : latLng,
                },function (results, status) {
                    if (status === 'OK'){
                        if (results[0]){
                            document.getElementById('user_info_update_address').value = results[0].formatted_address ;
                        } else {
                            document.getElementById('user_info_update_address').value = '';
                        }
                    }
                });
                document.getElementById('user_info_update_coordinates').value = latLng.lat+' '+latLng.lng;
            }

            var input = document.getElementById('user_info_update_address');
            var searchBox = new google.maps.places.Autocomplete(input);
            searchBox.setComponentRestrictions({'country': ['ua']});
            map.addListener('bounds_changed', function() {
                searchBox.setBounds(map.getBounds());
            });

            searchBox.addListener('place_changed', function() {
                var place = searchBox.getPlace();
                if (place.length == 0) {
                    return;
                }
                marker.setMap(null);
                var bounds = new google.maps.LatLngBounds();
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                marker = new google.maps.Marker({
                    map: map,
                    title: place.name,
                    position: place.geometry.location
                });
                document.getElementById('user_info_update_coordinates').value = place.geometry.location.lat() + ' ' + place.geometry.location.lng();
                if (place.geometry.viewport) {
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
                map.fitBounds(bounds);
            });
        }
    </script>
{% endblock %}
