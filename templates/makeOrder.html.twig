{% extends 'base.html.twig' %}
{% block stylesheets %}
    {{ parent() }}
    {{ encore_entry_link_tags('order') }}
    <style>
        /* Always set the map height explicitly to define the size of the div
         * element that contains the map. */
        #map-block {
            height: 100%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
        #description {
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
        }

        #infowindow-content .title {
            font-weight: bold;
        }

        #infowindow-content {
            display: none;
        }

        #map-block #infowindow-content {
            display: inline;
        }

        .pac-card {
            margin: 10px 10px 0 0;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            background-color: #fff;
            font-family: Roboto;
        }

        #pac-container {
            padding-bottom: 12px;
            margin-right: 12px;
        }

        .pac-controls {
            display: inline-block;
            padding: 5px 11px;
        }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 400px;
        }

        #pac-input:focus {
            border-color: #4d90fe;
        }

        #title {
            color: #fff;
            background-color: #4d90fe;
            font-size: 25px;
            font-weight: 500;
            padding: 6px 12px;
        }
        #target {
            width: 345px;
        }
    </style>
{% endblock %}
{% block body %}
        <div class="container">
            {% set sum = app.session.get('totalSum') %}
            {% include 'elements/small_header.html.twig' %}
            <div class="red-content">
                <embed id="van" type="image/svg+xml" src="/assets/img/van.svg"/>
                <div class="order-block">
                    <div id="order-title">
                        Оформление заказа
                    </div>
                    {{ form_start(form,{'attr': {'class': 'order-form'}}) }}
                        {{ form_row(form.name,{'attr': {'class': 'order-input',
                            'placeholder':'Имя*'}}) }}
                        {{ form_row(form.surname,{'attr': {'class': 'order-input',
                            'placeholder':'Фамилия*'}}) }}
                        {{ form_row(form.phoneNumber,{'attr': {'class': 'order-input input-margin-29',
                            'placeholder':'+38(000)___-__-__*'}}) }}
                        {{ form_row(form.email,{'attr': {'class': 'order-input',
                            'placeholder':'Email*'}}) }}
                        <div class="form-row input-margin-16">
                            {{ form_row(form.orderDate,{'attr': {'class': 'date-input',
                                'placeholder':'Дата*'}}) }}
                            {{ form_row(form.orderTime,{'attr': {'class': 'time-input',
                                'placeholder':'14:00*'}}) }}
                        </div>
                        <div class="delivery-type">
                            <div id="del" class="delivery-active delivery">
                                Доставка
                            </div>
                            <div id="self-del" class="self-delivery">
                                Самовывоз
                            </div>
                        </div>
                        {{ form_row(form.deliveryType,{'id':'adress-order','attr': {'class': 'order-input input-margin-16 order-address'}}) }}
                        <div class="lipinka-street">
                            проспект раков Липинка
                        </div>
                        <div class="checkout-order">
                            Оформить
                        </div>
                    {{ form_end(form) }}
{#                    <form action="" class="order-form">#}
{#                        <input type="text" class="order-input" placeholder="Имя*">#}
{#                        <input type="text" class="order-input" placeholder="Фамилия*">#}
{#                        <input type="text" class="order-input input-margin-29" placeholder="+38(000)___-__-__*">#}
{#                        <input type="text" class="order-input" placeholder="Email*">#}
{#                        <div class="form-row input-margin-16">#}
{#                            <input type="text" class="date-input" placeholder="Дата*">#}
{#                            <input type="text" class="time-input" placeholder="14:00*">#}
{#                        </div>#}
{#                        <div class="delivery-type">#}
{#                            <div id="del" class="delivery-active delivery">#}
{#                                Доставка#}
{#                            </div>#}
{#                            <div id="self-del" class="self-delivery">#}
{#                                Самовывоз#}
{#                            </div>#}
{#                        </div>#}
{#                        <input type="text" id="adress-order" class="order-input input-margin-16 order-address" placeholder="Address Bla Bla*">#}
{#                        <div class="lipinka-street">#}
{#                            проспект раков Липинка#}
{#                        </div>#}
{#                        <div class="checkout-order">#}
{#                            Оформить#}
{#                        </div>#}
{#                    </form>#}
                </div>
                <div id="map-block">

                </div>
            </div>
        </div>
        {% include 'elements/__footer.html.twig' with { 'active': false } %}
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    {{ encore_entry_script_tags('order') }}
    <script>
        // This example adds a search box to a map, using the Google Place Autocomplete
        // feature. People can enter geographical searches. The search box will return a
        // pick list containing a mix of places and predicted search terms.

        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        function initAutocomplete() {
            var map = new google.maps.Map(document.getElementById('map-block'), {
                center: {lat: 50.450469, lng: 30.515649},
                zoom: 13,
                mapTypeId: 'roadmap'
            });

            let geocoder = new google.maps.Geocoder;
            let marker;
            let listener = map.addListener('click', function(e) {
                placeMarker(e.latLng, map);
            });

            document.getElementById('del').onclick = function () {
                if (typeof marker == "object") {
                    marker.setMap(null);
                    marker = null;
                }
                map.addListener('click', function(e) {
                    placeMarker(e.latLng, map);
                });
            };

            document.getElementById('self-del').onclick = function (e) {
                placeMarker({lat: 50.495189, lng: 30.430260}, map);
                google.maps.event.clearListeners(map,'click');
            };

            function placeMarker(position, map) {
                if (marker == null) {
                    marker = new google.maps.Marker({
                        position: position,
                        map: map
                    });
                    let latLng = {
                        lat: marker.getPosition().lat(),
                        lng: marker.getPosition().lng()
                    };
                    geocoder.geocode({
                        'location' : latLng,
                    },function (results, status) {
                        if (status === 'OK'){
                            if (results[0]){
                                document.getElementById('adress-order').value = results[0].formatted_address ;
                            } else {
                                document.getElementById('adress-order').value = '';
                            }
                        };
                    });
                    map.panTo(position);
                } else {
                    let latLng = {
                        lat: marker.getPosition().lat(),
                        lng: marker.getPosition().lng()
                    };
                    geocoder.geocode({
                        'location' : latLng,
                    },function (results, status) {
                        if (status === 'OK'){
                            if (results[0]){
                                document.getElementById('adress-order').value = results[0].formatted_address ;
                            } else {
                                document.getElementById('adress-order').value = '';
                            }
                        };
                    });
                    marker.setPosition(position);
                    map.panTo(position);
                }
            }

            // Create the search box and link it to the UI element.
            var input = document.getElementById('adress-order');
            var searchBox = new google.maps.places.Autocomplete(input);
            searchBox.setComponentRestrictions({'country': ['ua']});
            // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function() {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('place_changed', function() {
                var place = searchBox.getPlace();
                if (place.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function(marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();

                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                     marker = new google.maps.Marker({
                        map: map,
                        title: place.name,
                        position: place.geometry.location
                    });

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                map.fitBounds(bounds);
            });
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC5CSb-iMy9DtAHF2u-LGV_j2dZ0UQFTCE&libraries=places&callback=initAutocomplete"
            async defer></script>
{% endblock %}